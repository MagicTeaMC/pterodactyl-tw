{"version":3,"file":"signals-core.mjs","sources":["../src/index.ts"],"sourcesContent":["function cycleDetected(): never {\n\tthrow new Error(\"Cycle detected\");\n}\n\n// Flags for Computed and Effect.\nconst RUNNING = 1 << 0;\nconst NOTIFIED = 1 << 1;\nconst OUTDATED = 1 << 2;\nconst DISPOSED = 1 << 3;\nconst HAS_ERROR = 1 << 4;\nconst TRACKING = 1 << 5;\n\n// A linked list node used to track dependencies (sources) and dependents (targets).\n// Also used to remember the source's last version number that the target saw.\ntype Node = {\n\t// A source whose value the target depends on.\n\t_source: Signal;\n\t_prevSource?: Node;\n\t_nextSource?: Node;\n\n\t// A target that depends on the source and should be notified when the source changes.\n\t_target: Computed | Effect;\n\t_prevTarget?: Node;\n\t_nextTarget?: Node;\n\n\t// The version number of the source that target has last seen. We use version numbers\n\t// instead of storing the source value, because source values can take arbitrary amount\n\t// of memory, and computeds could hang on to them forever because they're lazily evaluated.\n\t// Use the special value -1 to mark potentially unused but recyclable nodes.\n\t_version: number;\n\n\t// Used to remember & roll back the source's previous `._node` value when entering &\n\t// exiting a new evaluation context.\n\t_rollbackNode?: Node;\n};\n\nfunction startBatch() {\n\tbatchDepth++;\n}\n\nfunction endBatch() {\n\tif (batchDepth > 1) {\n\t\tbatchDepth--;\n\t\treturn;\n\t}\n\n\tlet error: unknown;\n\tlet hasError = false;\n\n\twhile (batchedEffect !== undefined) {\n\t\tlet effect: Effect | undefined = batchedEffect;\n\t\tbatchedEffect = undefined;\n\n\t\tbatchIteration++;\n\n\t\twhile (effect !== undefined) {\n\t\t\tconst next: Effect | undefined = effect._nextBatchedEffect;\n\t\t\teffect._nextBatchedEffect = undefined;\n\t\t\teffect._flags &= ~NOTIFIED;\n\n\t\t\tif (!(effect._flags & DISPOSED) && needsToRecompute(effect)) {\n\t\t\t\ttry {\n\t\t\t\t\teffect._callback();\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (!hasError) {\n\t\t\t\t\t\terror = err;\n\t\t\t\t\t\thasError = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\teffect = next;\n\t\t}\n\t}\n\tbatchIteration = 0;\n\tbatchDepth--;\n\n\tif (hasError) {\n\t\tthrow error;\n\t}\n}\n\nfunction batch<T>(callback: () => T): T {\n\tif (batchDepth > 0) {\n\t\treturn callback();\n\t}\n\t/*@__INLINE__**/ startBatch();\n\ttry {\n\t\treturn callback();\n\t} finally {\n\t\tendBatch();\n\t}\n}\n\n// Currently evaluated computed or effect.\nlet evalContext: Computed | Effect | undefined = undefined;\n\n// Effects collected into a batch.\nlet batchedEffect: Effect | undefined = undefined;\nlet batchDepth = 0;\nlet batchIteration = 0;\n\n// A global version number for signals, used for fast-pathing repeated\n// computed.peek()/computed.value calls when nothing has changed globally.\nlet globalVersion = 0;\n\nfunction addDependency(signal: Signal): Node | undefined {\n\tif (evalContext === undefined) {\n\t\treturn undefined;\n\t}\n\n\tlet node = signal._node;\n\tif (node === undefined || node._target !== evalContext) {\n\t\t// `signal` is a new dependency. Create a new node dependency node, move it\n\t\t//  to the front of the current context's dependency list.\n\t\tnode = {\n\t\t\t_version: 0,\n\t\t\t_source: signal,\n\t\t\t_prevSource: undefined,\n\t\t\t_nextSource: evalContext._sources,\n\t\t\t_target: evalContext,\n\t\t\t_prevTarget: undefined,\n\t\t\t_nextTarget: undefined,\n\t\t\t_rollbackNode: node,\n\t\t};\n\t\tevalContext._sources = node;\n\t\tsignal._node = node;\n\n\t\t// Subscribe to change notifications from this dependency if we're in an effect\n\t\t// OR evaluating a computed signal that in turn has subscribers.\n\t\tif (evalContext._flags & TRACKING) {\n\t\t\tsignal._subscribe(node);\n\t\t}\n\t\treturn node;\n\t} else if (node._version === -1) {\n\t\t// `signal` is an existing dependency from a previous evaluation. Reuse it.\n\t\tnode._version = 0;\n\n\t\t// If `node` is not already the current head of the dependency list (i.e.\n\t\t// there is a previous node in the list), then make `node` the new head.\n\t\tif (node._prevSource !== undefined) {\n\t\t\tnode._prevSource._nextSource = node._nextSource;\n\t\t\tif (node._nextSource !== undefined) {\n\t\t\t\tnode._nextSource._prevSource = node._prevSource;\n\t\t\t}\n\t\t\tnode._prevSource = undefined;\n\t\t\tnode._nextSource = evalContext._sources;\n\t\t\t// evalCotext._sources must be !== undefined (and !== node), because\n\t\t\t// `node` was originally pointing to some previous node.\n\t\t\tevalContext._sources!._prevSource = node;\n\t\t\tevalContext._sources = node;\n\t\t}\n\n\t\t// We can assume that the currently evaluated effect / computed signal is already\n\t\t// subscribed to change notifications from `signal` if needed.\n\t\treturn node;\n\t}\n\treturn undefined;\n}\n\ndeclare class Signal<T = any> {\n\t/** @internal */\n\t_value: unknown;\n\n\t/** @internal\n\t * Version numbers should always be >= 0, because the special value -1 is used\n\t * by Nodes to signify potentially unused but recyclable notes.\n\t */\n\t_version: number;\n\n\t/** @internal */\n\t_node?: Node;\n\n\t/** @internal */\n\t_targets?: Node;\n\n\tconstructor(value?: T);\n\n\t/** @internal */\n\t_refresh(): boolean;\n\n\t/** @internal */\n\t_subscribe(node: Node): void;\n\n\t/** @internal */\n\t_unsubscribe(node: Node): void;\n\n\tsubscribe(fn: (value: T) => void): () => void;\n\n\tvalueOf(): T;\n\n\ttoString(): string;\n\n\tpeek(): T;\n\n\tget value(): T;\n\tset value(value: T);\n}\n\n/** @internal */\nfunction Signal(this: Signal, value?: unknown) {\n\tthis._value = value;\n\tthis._version = 0;\n\tthis._node = undefined;\n\tthis._targets = undefined;\n}\n\nSignal.prototype._refresh = function () {\n\treturn true;\n};\n\nSignal.prototype._subscribe = function (node) {\n\tif (this._targets !== node && node._prevTarget === undefined) {\n\t\tnode._nextTarget = this._targets;\n\t\tif (this._targets !== undefined) {\n\t\t\tthis._targets._prevTarget = node;\n\t\t}\n\t\tthis._targets = node;\n\t}\n};\n\nSignal.prototype._unsubscribe = function (node) {\n\tconst prev = node._prevTarget;\n\tconst next = node._nextTarget;\n\tif (prev !== undefined) {\n\t\tprev._nextTarget = next;\n\t\tnode._prevTarget = undefined;\n\t}\n\tif (next !== undefined) {\n\t\tnext._prevTarget = prev;\n\t\tnode._nextTarget = undefined;\n\t}\n\tif (node === this._targets) {\n\t\tthis._targets = next;\n\t}\n};\n\nSignal.prototype.subscribe = function (fn) {\n\tconst signal = this;\n\treturn effect(function (this: Effect) {\n\t\tconst value = signal.value;\n\t\tconst flag = this._flags & TRACKING;\n\t\tthis._flags &= ~TRACKING;\n\t\ttry {\n\t\t\tfn(value);\n\t\t} finally {\n\t\t\tthis._flags |= flag;\n\t\t}\n\t});\n};\n\nSignal.prototype.valueOf = function () {\n\treturn this.value;\n};\n\nSignal.prototype.toString = function () {\n\treturn this.value + \"\";\n};\n\nSignal.prototype.peek = function () {\n\treturn this._value;\n};\n\nObject.defineProperty(Signal.prototype, \"value\", {\n\tget() {\n\t\tconst node = addDependency(this);\n\t\tif (node !== undefined) {\n\t\t\tnode._version = this._version;\n\t\t}\n\t\treturn this._value;\n\t},\n\tset(value) {\n\t\tif (value !== this._value) {\n\t\t\tif (batchIteration > 100) {\n\t\t\t\tcycleDetected();\n\t\t\t}\n\n\t\t\tthis._value = value;\n\t\t\tthis._version++;\n\t\t\tglobalVersion++;\n\n\t\t\t/**@__INLINE__*/ startBatch();\n\t\t\ttry {\n\t\t\t\tfor (\n\t\t\t\t\tlet node = this._targets;\n\t\t\t\t\tnode !== undefined;\n\t\t\t\t\tnode = node._nextTarget\n\t\t\t\t) {\n\t\t\t\t\tnode._target._notify();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tendBatch();\n\t\t\t}\n\t\t}\n\t},\n});\n\nfunction signal<T>(value: T): Signal<T> {\n\treturn new Signal(value);\n}\n\nfunction needsToRecompute(target: Computed | Effect): boolean {\n\t// Check the dependencies for changed values. The dependency list is already\n\t// in order of use. Therefore if multiple dependencies have changed values, only\n\t// the first used dependency is re-evaluated at this point.\n\tfor (\n\t\tlet node = target._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\t// If there's a new version of the dependency before or after refreshing,\n\t\t// or the dependency has something blocking it from refreshing at all (e.g. a\n\t\t// dependency cycle), then we need to recompute.\n\t\tif (\n\t\t\tnode._source._version !== node._version ||\n\t\t\t!node._source._refresh() ||\n\t\t\tnode._source._version !== node._version\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t// If none of the dependencies have changed values since last recompute then the\n\t// there's no need to recompute.\n\treturn false;\n}\n\nfunction prepareSources(target: Computed | Effect) {\n\tfor (\n\t\tlet node = target._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\tconst rollbackNode = node._source._node;\n\t\tif (rollbackNode !== undefined) {\n\t\t\tnode._rollbackNode = rollbackNode;\n\t\t}\n\t\tnode._source._node = node;\n\t\tnode._version = -1;\n\t}\n}\n\nfunction cleanupSources(target: Computed | Effect) {\n\t// At this point target._sources is a mishmash of current & former dependencies.\n\t// The current dependencies are also in a reverse order of use.\n\t// Therefore build a new, reverted list of dependencies containing only the current\n\t// dependencies in a proper order of use.\n\t// Drop former dependencies from the list and unsubscribe from their change notifications.\n\n\tlet node = target._sources;\n\tlet sources = undefined;\n\twhile (node !== undefined) {\n\t\tconst next = node._nextSource;\n\t\tif (node._version === -1) {\n\t\t\tnode._source._unsubscribe(node);\n\t\t\tnode._nextSource = undefined;\n\t\t} else {\n\t\t\tif (sources !== undefined) {\n\t\t\t\tsources._prevSource = node;\n\t\t\t}\n\t\t\tnode._prevSource = undefined;\n\t\t\tnode._nextSource = sources;\n\t\t\tsources = node;\n\t\t}\n\n\t\tnode._source._node = node._rollbackNode;\n\t\tif (node._rollbackNode !== undefined) {\n\t\t\tnode._rollbackNode = undefined;\n\t\t}\n\t\tnode = next;\n\t}\n\ttarget._sources = sources;\n}\n\ndeclare class Computed<T = any> extends Signal<T> {\n\t_compute: () => T;\n\t_sources?: Node;\n\t_globalVersion: number;\n\t_flags: number;\n\n\tconstructor(compute: () => T);\n\n\t_notify(): void;\n\tget value(): T;\n}\n\nfunction Computed(this: Computed, compute: () => unknown) {\n\tSignal.call(this, undefined);\n\n\tthis._compute = compute;\n\tthis._sources = undefined;\n\tthis._globalVersion = globalVersion - 1;\n\tthis._flags = OUTDATED;\n}\n\nComputed.prototype = new Signal() as Computed;\n\nComputed.prototype._refresh = function () {\n\tthis._flags &= ~NOTIFIED;\n\n\tif (this._flags & RUNNING) {\n\t\treturn false;\n\t}\n\n\t// If this computed signal has subscribed to updates from its dependencies\n\t// (TRACKING flag set) and none of them have notified about changes (OUTDATED\n\t// flag not set), then the computed value can't have changed.\n\tif ((this._flags & (OUTDATED | TRACKING)) === TRACKING) {\n\t\treturn true;\n\t}\n\tthis._flags &= ~OUTDATED;\n\n\tif (this._globalVersion === globalVersion) {\n\t\treturn true;\n\t}\n\tthis._globalVersion = globalVersion;\n\n\t// Mark this computed signal running before checking the dependencies for value\n\t// changes, so that the RUNNIN flag can be used to notice cyclical dependencies.\n\tthis._flags |= RUNNING;\n\tif (this._version > 0 && !needsToRecompute(this)) {\n\t\tthis._flags &= ~RUNNING;\n\t\treturn true;\n\t}\n\n\tconst prevContext = evalContext;\n\ttry {\n\t\tprepareSources(this);\n\t\tevalContext = this;\n\t\tconst value = this._compute();\n\t\tif (\n\t\t\tthis._flags & HAS_ERROR ||\n\t\t\tthis._value !== value ||\n\t\t\tthis._version === 0\n\t\t) {\n\t\t\tthis._value = value;\n\t\t\tthis._flags &= ~HAS_ERROR;\n\t\t\tthis._version++;\n\t\t}\n\t} catch (err) {\n\t\tthis._value = err;\n\t\tthis._flags |= HAS_ERROR;\n\t\tthis._version++;\n\t}\n\tevalContext = prevContext;\n\tcleanupSources(this);\n\tthis._flags &= ~RUNNING;\n\treturn true;\n};\n\nComputed.prototype._subscribe = function (node) {\n\tif (this._targets === undefined) {\n\t\tthis._flags |= OUTDATED | TRACKING;\n\n\t\t// A computed signal subscribes lazily to its dependencies when the it\n\t\t// gets its first subscriber.\n\t\tfor (\n\t\t\tlet node = this._sources;\n\t\t\tnode !== undefined;\n\t\t\tnode = node._nextSource\n\t\t) {\n\t\t\tnode._source._subscribe(node);\n\t\t}\n\t}\n\tSignal.prototype._subscribe.call(this, node);\n};\n\nComputed.prototype._unsubscribe = function (node) {\n\tSignal.prototype._unsubscribe.call(this, node);\n\n\t// Computed signal unsubscribes from its dependencies from it loses its last subscriber.\n\tif (this._targets === undefined) {\n\t\tthis._flags &= ~TRACKING;\n\n\t\tfor (\n\t\t\tlet node = this._sources;\n\t\t\tnode !== undefined;\n\t\t\tnode = node._nextSource\n\t\t) {\n\t\t\tnode._source._unsubscribe(node);\n\t\t}\n\t}\n};\n\nComputed.prototype._notify = function () {\n\tif (!(this._flags & NOTIFIED)) {\n\t\tthis._flags |= OUTDATED | NOTIFIED;\n\n\t\tfor (\n\t\t\tlet node = this._targets;\n\t\t\tnode !== undefined;\n\t\t\tnode = node._nextTarget\n\t\t) {\n\t\t\tnode._target._notify();\n\t\t}\n\t}\n};\n\nComputed.prototype.peek = function () {\n\tif (!this._refresh()) {\n\t\tcycleDetected();\n\t}\n\tif (this._flags & HAS_ERROR) {\n\t\tthrow this._value;\n\t}\n\treturn this._value;\n};\n\nObject.defineProperty(Computed.prototype, \"value\", {\n\tget() {\n\t\tif (this._flags & RUNNING) {\n\t\t\tcycleDetected();\n\t\t}\n\t\tconst node = addDependency(this);\n\t\tthis._refresh();\n\t\tif (node !== undefined) {\n\t\t\tnode._version = this._version;\n\t\t}\n\t\tif (this._flags & HAS_ERROR) {\n\t\t\tthrow this._value;\n\t\t}\n\t\treturn this._value;\n\t},\n});\n\ninterface ReadonlySignal<T = any> extends Signal<T> {\n\treadonly value: T;\n}\n\nfunction computed<T>(compute: () => T): ReadonlySignal<T> {\n\treturn new Computed(compute);\n}\n\nfunction cleanupEffect(effect: Effect) {\n\tconst cleanup = effect._cleanup;\n\teffect._cleanup = undefined;\n\n\tif (typeof cleanup === \"function\") {\n\t\t/*@__INLINE__**/ startBatch();\n\n\t\t// Run cleanup functions always outside of any context.\n\t\tconst prevContext = evalContext;\n\t\tevalContext = undefined;\n\t\ttry {\n\t\t\tcleanup();\n\t\t} catch (err) {\n\t\t\teffect._flags &= ~RUNNING;\n\t\t\teffect._flags |= DISPOSED;\n\t\t\tdisposeEffect(effect);\n\t\t\tthrow err;\n\t\t} finally {\n\t\t\tevalContext = prevContext;\n\t\t\tendBatch();\n\t\t}\n\t}\n}\n\nfunction disposeEffect(effect: Effect) {\n\tfor (\n\t\tlet node = effect._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\tnode._source._unsubscribe(node);\n\t}\n\teffect._compute = undefined;\n\teffect._sources = undefined;\n\n\tcleanupEffect(effect);\n}\n\nfunction endEffect(this: Effect, prevContext?: Computed | Effect) {\n\tif (evalContext !== this) {\n\t\tthrow new Error(\"Out-of-order effect\");\n\t}\n\tcleanupSources(this);\n\tevalContext = prevContext;\n\n\tthis._flags &= ~RUNNING;\n\tif (this._flags & DISPOSED) {\n\t\tdisposeEffect(this);\n\t}\n\tendBatch();\n}\n\ndeclare class Effect {\n\t_compute?: () => unknown;\n\t_cleanup?: unknown;\n\t_sources?: Node;\n\t_nextBatchedEffect?: Effect;\n\t_flags: number;\n\n\tconstructor(compute: () => void);\n\n\t_callback(): void;\n\t_start(): () => void;\n\t_notify(): void;\n\t_dispose(): void;\n}\n\nfunction Effect(this: Effect, compute: () => void) {\n\tthis._compute = compute;\n\tthis._cleanup = undefined;\n\tthis._sources = undefined;\n\tthis._nextBatchedEffect = undefined;\n\tthis._flags = TRACKING;\n}\n\nEffect.prototype._callback = function () {\n\tconst finish = this._start();\n\ttry {\n\t\tif (!(this._flags & DISPOSED) && this._compute !== undefined) {\n\t\t\tthis._cleanup = this._compute();\n\t\t}\n\t} finally {\n\t\tfinish();\n\t}\n};\n\nEffect.prototype._start = function () {\n\tif (this._flags & RUNNING) {\n\t\tcycleDetected();\n\t}\n\tthis._flags |= RUNNING;\n\tthis._flags &= ~DISPOSED;\n\tcleanupEffect(this);\n\tprepareSources(this);\n\n\t/*@__INLINE__**/ startBatch();\n\tconst prevContext = evalContext;\n\tevalContext = this;\n\treturn endEffect.bind(this, prevContext);\n};\n\nEffect.prototype._notify = function () {\n\tif (!(this._flags & NOTIFIED)) {\n\t\tthis._flags |= NOTIFIED;\n\t\tthis._nextBatchedEffect = batchedEffect;\n\t\tbatchedEffect = this;\n\t}\n};\n\nEffect.prototype._dispose = function () {\n\tthis._flags |= DISPOSED;\n\n\tif (!(this._flags & RUNNING)) {\n\t\tdisposeEffect(this);\n\t}\n};\n\nfunction effect(compute: () => unknown): () => void {\n\tconst effect = new Effect(compute);\n\teffect._callback();\n\t// Return a bound function instead of a wrapper like `() => effect._dispose()`,\n\t// because bound functions seem to be just as fast and take up a lot less memory.\n\treturn effect._dispose.bind(effect);\n}\n\nexport { signal, computed, effect, batch, Signal, ReadonlySignal };\n"],"names":["cycleDetected","Error","endBatch","batchDepth","error","hasError","undefined","batchedEffect","effect","batchIteration","next","_nextBatchedEffect","_flags","needsToRecompute","_callback","err","batch","callback","evalContext","globalVersion","addDependency","signal","node","_node","_target","_version","_source","_prevSource","_nextSource","_sources","_prevTarget","_nextTarget","_rollbackNode","_subscribe","Signal","value","this","_value","_targets","prototype","_refresh","_unsubscribe","prev","subscribe","fn","flag","valueOf","toString","peek","Object","defineProperty","get","set","_notify","target","prepareSources","rollbackNode","cleanupSources","sources","Computed","compute","call","_compute","_globalVersion","prevContext","OUTDATED","computed","cleanupEffect","cleanup","_cleanup","disposeEffect","endEffect","Effect","finish","_start","bind","_dispose"],"mappings":"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"}