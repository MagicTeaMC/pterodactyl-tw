{"version":3,"file":"index.modern.js","sources":["../index.ts"],"sourcesContent":["import {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nexport type TOptions = {\n  maxFontSize?: number;\n  minFontSize?: number;\n  onFinish?: (fontSize: number) => void;\n  onStart?: () => void;\n  resolution?: number;\n};\n\n// Suppress `useLayoutEffect` warning when rendering on the server\n// https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nconst useIsoLayoutEffect =\n  typeof window !== \"undefined\" &&\n  window.document &&\n  window.document.createElement\n    ? useLayoutEffect\n    : useEffect;\n\nconst useFitText = ({\n  maxFontSize = 100,\n  minFontSize = 20,\n  onFinish,\n  onStart,\n  resolution = 5,\n}: TOptions = {}) => {\n  const initState = useCallback(() => {\n    return {\n      calcKey: 0,\n      fontSize: maxFontSize,\n      fontSizePrev: minFontSize,\n      fontSizeMax: maxFontSize,\n      fontSizeMin: minFontSize,\n    };\n  }, [maxFontSize, minFontSize]);\n\n  const ref = useRef<HTMLDivElement>(null);\n  const innerHtmlPrevRef = useRef<string>();\n  const isCalculatingRef = useRef(false);\n  const [state, setState] = useState(initState);\n  const { calcKey, fontSize, fontSizeMax, fontSizeMin, fontSizePrev } = state;\n\n  // Montior div size changes and recalculate on resize\n  let animationFrameId: number | null = null;\n  const [ro] = useState(\n    () =>\n      new ResizeObserver(() => {\n        animationFrameId = window.requestAnimationFrame(() => {\n          if (isCalculatingRef.current) {\n            return;\n          }\n          onStart && onStart();\n          isCalculatingRef.current = true;\n          // `calcKey` is used in the dependencies array of\n          // `useIsoLayoutEffect` below. It is incremented so that the font size\n          // will be recalculated even if the previous state didn't change (e.g.\n          // when the text fit initially).\n          setState({\n            ...initState(),\n            calcKey: calcKey + 1,\n          });\n        });\n      }),\n  );\n\n  useEffect(() => {\n    if (ref.current) {\n      ro.observe(ref.current);\n    }\n    return () => {\n      animationFrameId && window.cancelAnimationFrame(animationFrameId);\n      ro.disconnect();\n    };\n  }, [animationFrameId, ro]);\n\n  // Recalculate when the div contents change\n  const innerHtml = ref.current && ref.current.innerHTML;\n  useEffect(() => {\n    if (calcKey === 0 || isCalculatingRef.current) {\n      return;\n    }\n    if (innerHtml !== innerHtmlPrevRef.current) {\n      onStart && onStart();\n      setState({\n        ...initState(),\n        calcKey: calcKey + 1,\n      });\n    }\n    innerHtmlPrevRef.current = innerHtml;\n  }, [calcKey, initState, innerHtml, onStart]);\n\n  // Check overflow and resize font\n  useIsoLayoutEffect(() => {\n    // Don't start calculating font size until the `resizeKey` is incremented\n    // above in the `ResizeObserver` callback. This avoids an extra resize\n    // on initialization.\n    if (calcKey === 0) {\n      return;\n    }\n\n    const isWithinResolution = Math.abs(fontSize - fontSizePrev) <= resolution;\n    const isOverflow =\n      !!ref.current &&\n      (ref.current.scrollHeight > ref.current.offsetHeight ||\n        ref.current.scrollWidth > ref.current.offsetWidth);\n    const isFailed = isOverflow && fontSize === fontSizePrev;\n    const isAsc = fontSize > fontSizePrev;\n\n    // Return if the font size has been adjusted \"enough\" (change within `resolution`)\n    // reduce font size by one increment if it's overflowing.\n    if (isWithinResolution) {\n      if (isFailed) {\n        isCalculatingRef.current = false;\n        console.error(\n          `Failed to fit text with \\`minFontSize = ${minFontSize}\\`. To fix, reduce \\`minFontSize\\`.`,\n        );\n      } else if (isOverflow) {\n        setState({\n          fontSize: isAsc ? fontSizePrev : fontSizeMin,\n          fontSizeMax,\n          fontSizeMin,\n          fontSizePrev,\n          calcKey,\n        });\n      } else {\n        isCalculatingRef.current = false;\n        onFinish && onFinish(fontSize);\n      }\n      return;\n    }\n\n    // Binary search to adjust font size\n    let delta: number;\n    let newMax = fontSizeMax;\n    let newMin = fontSizeMin;\n    if (isOverflow) {\n      delta = isAsc ? fontSizePrev - fontSize : fontSizeMin - fontSize;\n      newMax = Math.min(fontSizeMax, fontSize);\n    } else {\n      delta = isAsc ? fontSizeMax - fontSize : fontSizePrev - fontSize;\n      newMin = Math.max(fontSizeMin, fontSize);\n    }\n    setState({\n      calcKey,\n      fontSize: fontSize + delta / 2,\n      fontSizeMax: newMax,\n      fontSizeMin: newMin,\n      fontSizePrev: fontSize,\n    });\n  }, [\n    calcKey,\n    fontSize,\n    fontSizeMax,\n    fontSizeMin,\n    fontSizePrev,\n    onFinish,\n    ref,\n    resolution,\n  ]);\n\n  return { fontSize: `${fontSize}%`, ref };\n};\n\nexport default useFitText;\n"],"names":["useIsoLayoutEffect","window","document","createElement","useLayoutEffect","useEffect","maxFontSize","minFontSize","onFinish","onStart","resolution","initState","useCallback","calcKey","fontSize","fontSizePrev","fontSizeMax","fontSizeMin","ref","useRef","innerHtmlPrevRef","isCalculatingRef","state","setState","useState","animationFrameId","ro","ResizeObserver","requestAnimationFrame","current","observe","cancelAnimationFrame","disconnect","innerHtml","innerHTML","isWithinResolution","Math","abs","isOverflow","scrollHeight","offsetHeight","scrollWidth","offsetWidth","isAsc","console","error","delta","newMax","newMin","min","max"],"mappings":"0IAmBA,MAAMA,EACc,oBAAXC,QACPA,OAAOC,UACPD,OAAOC,SAASC,cACZC,EACAC,gBAEa,EACjBC,YAAAA,EAAc,IACdC,YAAAA,EAAc,GACdC,SAAAA,EACAC,QAAAA,EACAC,WAAAA,EAAa,GACD,MACZ,MAAMC,EAAYC,EAAY,KACrB,CACLC,QAAS,EACTC,SAAUR,EACVS,aAAcR,EACdS,YAAaV,EACbW,YAAaV,IAEd,CAACD,EAAaC,IAEXW,EAAMC,EAAuB,MAC7BC,EAAmBD,IACnBE,EAAmBF,GAAO,IACzBG,EAAOC,GAAYC,EAASb,IAC7BE,QAAEA,EAAFC,SAAWA,EAAXE,YAAqBA,EAArBC,YAAkCA,EAAlCF,aAA+CA,GAAiBO,EAGtE,IAAIG,EAAkC,KACtC,MAAOC,GAAMF,EACX,IACE,IAAIG,EAAe,KACjBF,EAAmBxB,OAAO2B,sBAAsB,KAC1CP,EAAiBQ,UAGrBpB,GAAWA,IACXY,EAAiBQ,SAAU,EAK3BN,EAAS,IACJZ,IACHE,QAASA,EAAU,UAM7BR,EAAU,KACJa,EAAIW,SACNH,EAAGI,QAAQZ,EAAIW,SAEV,KACLJ,GAAoBxB,OAAO8B,qBAAqBN,GAChDC,EAAGM,eAEJ,CAACP,EAAkBC,IAGtB,MAAMO,EAAYf,EAAIW,SAAWX,EAAIW,QAAQK,UAoF7C,OAnFA7B,EAAU,KACQ,IAAZQ,GAAiBQ,EAAiBQ,UAGlCI,IAAcb,EAAiBS,UACjCpB,GAAWA,IACXc,EAAS,IACJZ,IACHE,QAASA,EAAU,KAGvBO,EAAiBS,QAAUI,IAC1B,CAACpB,EAASF,EAAWsB,EAAWxB,IAGnCT,EAAmB,KAIjB,GAAgB,IAAZa,EACF,OAGF,MAAMsB,EAAqBC,KAAKC,IAAIvB,EAAWC,IAAiBL,EAC1D4B,IACFpB,EAAIW,UACLX,EAAIW,QAAQU,aAAerB,EAAIW,QAAQW,cACtCtB,EAAIW,QAAQY,YAAcvB,EAAIW,QAAQa,aAEpCC,EAAQ7B,EAAWC,EAIzB,GAAIoB,EAkBF,YAvBeG,GAAcxB,IAAaC,GAOxCM,EAAiBQ,SAAU,EAC3Be,QAAQC,iDACqCtC,yCAEpC+B,EACTf,EAAS,CACPT,SAAU6B,EAAQ5B,EAAeE,EACjCD,YAAAA,EACAC,YAAAA,EACAF,aAAAA,EACAF,QAAAA,KAGFQ,EAAiBQ,SAAU,EAC3BrB,GAAYA,EAASM,KAMzB,IAAIgC,EACAC,EAAS/B,EACTgC,EAAS/B,EACTqB,GACFQ,EAAQH,EAAQ5B,EAAeD,EAAWG,EAAcH,EACxDiC,EAASX,KAAKa,IAAIjC,EAAaF,KAE/BgC,EAAQH,EAAQ3B,EAAcF,EAAWC,EAAeD,EACxDkC,EAASZ,KAAKc,IAAIjC,EAAaH,IAEjCS,EAAS,CACPV,QAAAA,EACAC,SAAUA,EAAWgC,EAAQ,EAC7B9B,YAAa+B,EACb9B,YAAa+B,EACbjC,aAAcD,KAEf,CACDD,EACAC,EACAE,EACAC,EACAF,EACAP,EACAU,EACAR,IAGK,CAAEI,SAAaA,MAAaI,IAAAA"}